= CONNECT FOUR

== What It's All About

This is a demo application written as a way for me to learn Adobe Flex development. The main goal was to familiarize myself with Flex and ActionScript but I didn't want to just whip out a "Flex in a Week" kind of application. I wanted to do something that was a little closer to what I would do at work: solid design, adherence to best practices, unit and integration testing, etc. I also wanted to get it done in about a week or so. This is the result.

Generally I like to keep design to a minimum and get to implementation as soon as reasonably possible. As an old OO instructor of mine used to say, "Design as much as necessary to start implementing and no more." I started this project by creating a mind map of the problem (using XMind, http://www.xmind.net/) and then created a couple of small UML diagrams (using ArgoUML, http://argouml.tigris.org/). Normally I would throw these out after the software is working but for completeness I kept them this time (in the "doc" folder). I have not updated them to reflect the final state of the code.

=== The Perilous Process of Porting the Pomakis Program

Being the kind of person who doesn't like to reinvent the wheel, I did a brief web search looking for some algorithmic direction. I wanted to find something that would be a good reference, that decoupled the game logic from the interface, and that would require me to write enough code to get a good feel of the ActionScript langauge. Alex Pomakis wrote a simple Connect Four engine in 1992 and released it to the public domain (http://www.pomakis.com/c4/). The Pomakis code worked for me for several reasons:

* It completely decouples the game engine from the UI.
* It was written for an AI class so I assume the AL algorithms are solid.
* The board algorithms support any arbitraty board size.
* The code was written in ANSI C which means I had to rewrite everything.

For reference the Pomakis code is included with the source in the "doc" folder.

=== What I am Happy About

Overall I am happy about the code. It has a game engine that is completely decoupled from the UI; it has a good suite of test cases; the design has plenty of room to grow. I was able to dig into ActionScript to a fairly reasonable level. Not bad for a little over a week's work.

=== What I am Unhappy About

Not everything in this program is perfect. If I had infinite time to work on it I would do a couple of things a little differently:

==== Board Width, Height, and Win Condition

The class structure I created feels pretty good. Separating the Player, ScoreKeeper, and WinMap from the Board works pretty weel. Each of those classes is a good example of the Single Responsibility Principle. The problem is that all four need access to the width and height of the board and also the number of pieces in a row neede to win. Getting this data required redundancy in the consttructors and callback references to the Board class. This has a little stink. I considered creating a bean-like class to hold these properties but this wouldn't decrease the coupling and didn't really stink less.

==== Bitwise Operations

The Pomakis code used a "magic win number" to verify the winning move. The magic number and the related checks all use bitwise operations (old school C-style, baby!). Although I understand the overall algorithm I never learned how to do bitwise operations in my head so I had to take the original operations on blind faith. Since most programmers today don't do many bitwise operations my preference would be to remove these calculations.

==== Test Data

Although I am pretty happy with my test cases my test data is somewhat limited. The problem is that a standard 6x7 board generates many permutations of board state. Since my algorithms are not limited to one board size I had to do a fair amount of testing. I didn't have time to manually figure out a representative set of board states so many of my tests used very small boards (2x2 and 3x3). This was sufficient for a demo project but a production application needs much better test data.

=== Initial thoughts on Adobe Flex

One difficulty I have learning a new language/technology is that most "getting started" tutorials are insufficient. As an experienced and educated programmer I know how to do a bunch of advanced things and want to know how to do them in all environment I work in. Introductory tutorials rarely cover unit and integration testing, best practices, common idioms, application frameworks, or deeper object oriented concepts like patterns, abstract classes, and interfaces. Learning how to perform basic tasks just won't cut it. Before I wrote a single line of code I created a list of topics I wanted to look into before I began development and then I did a bunch of research. I was very impresses at how easily I was able to find the information I was looking for. There were several books available in Safari Books Online, several books freely available online, and numerous tutorial videos. Better yet, there seems to be a very active developer community and I was able to find answers to very specific questions (such as how to simulate an abstract class) from a variety of blogs. The wealth of information available made it very easy for me to get startes. It was also very helpful that everything I encountered in Flex and Flash Builder was familiar to me from working in other environments.

The basic Flex environment is very similar to VB 6. I mean this in a good way. VB 6 was much-milgined because it was easy to use that many crappy developers wrote a bunch of crappy code. This isn't a reflection on the technology. Flex is similar to VB 6 in that it cleanly separated display from the logic. Display in Flex is managed by "states" (analogous to VB forms) and each state has properties. The properties can be set through visual tools in the IDE but each state is stored as a single XML file (specifically MXML). I took a couple of VB 6 classes while pursuing my first masters degree and I logged many hours in VB 6 building COM objects to back-end ASP (pre-.NET) applications. The paradigm was very familiar to me.

The ActionScript language was also very easy to learn. It is very similar to Java and C# and I have years of experience in both languages. The only significant syntactical difference in ActionScript is the way variable data types and function return types are declared. Aside from that the language looks and behaves extremely like Java. It wasn't until I started getting a little fancy by declaring a constructor private, declaring multiple constructors with different signatures, and defining abstract classes (none of which work in ActionScript) that I had issues. Anaswers to all of those were easy to find with a simple Google search.

Although Flex is similar to VB 6 it is several generations more advanced. Adobe's development tool is built on Eclipse so it is a mature, robust IDE with tremendous community support. I have no professional experience with Eclipse but it is the standard tool for one university where I am part-time faculty so I have enough experience with it to be productive. Flex also incorporates many best practices and advanced patterns into its wizards. Rather than just creating a data connector widget, for example, it will create a proper data service following the Service pattern. Having the wizards create good, clean code is very nice and speaks well for Adobe. Because the web is the primary place for Flash apps to live the integration between Flex and common web service technologies is impressive. Not only will it automatically consume and present data from various databases it will also automatically parse JSON, WDSL, and generic XML. It will even run PHP files directly so you can do your server-side programming in clean PHP classes without an actual web interface. This is so slick its crazy.

Putting aside the philosophical issue of using a proprietary technology like Flash, my initial impression is that the Flex environment is pretty freakin' sweet.

== Resources

=== Connect Four Algorithms

* Connect Four on Wikipedia (http://en.wikipedia.org/wiki/Connect_Four)
* Keith Pomakis "n-In-A-Row" (http://www.pomakis.com/c4/)
* "Alpha-beta pruning" on Wikipedia (http://en.wikipedia.org/wiki/Alpha-beta_pruning)
 
=== General Information about Flex Development

* "Flash Builder 4 and Flex 4 Bible" (Safari Books Online)
* "Flex 3 Cookbook" (Safari Books Online)
* "Programming ActionScript 3.0" (http://livedocs.adobe.com/flash/9.0/main/flash_as3_programming.pdf)

=== Testing Flex Applications

* FunFX at GitHub (http://wiki.github.com/peternic/funfx/)
* FlexUnit at Adobe Open Source (http://opensource.adobe.com/wiki/display/flexunit/FlexUnit)

==== Cucumber Testing

* sudo gem install cucumber
* sudo gem install funfx
* sudo gem install safariwatir
* sudo gem install firewatir

== COPYRIGHT

Copyright (c) 2010 Jerry D'Antonio <stumpjumper@gmail.com>.

Licensed under MIT License http://www.opensource.org/licenses/mit-license.php

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
